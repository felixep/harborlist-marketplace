#!/bin/bash

# Environment switching utility for HarborList dual auth setup
# This script helps switch between local (LocalStack) and AWS environments

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [local|aws] [environment]"
    echo ""
    echo "Environments:"
    echo "  local                 - Switch to LocalStack for local development"
    echo "  aws dev              - Switch to AWS development environment"
    echo "  aws staging          - Switch to AWS staging environment"
    echo "  aws prod             - Switch to AWS production environment"
    echo ""
    echo "Examples:"
    echo "  $0 local             - Switch to LocalStack"
    echo "  $0 aws dev           - Switch to AWS dev environment"
    echo "  $0 aws prod          - Switch to AWS production environment"
    echo ""
    echo "Options:"
    echo "  --check              - Check current environment configuration"
    echo "  --help               - Show this help message"
}

# Function to check current environment
check_environment() {
    echo "🔍 Current Environment Configuration:"
    echo "===================================="
    
    # Check backend environment files
    if [ -f "$PROJECT_ROOT/backend/.env.local" ]; then
        print_info "Backend .env.local exists"
        if grep -q "IS_LOCALSTACK=true" "$PROJECT_ROOT/backend/.env.local"; then
            print_status "Backend configured for LocalStack"
        else
            print_warning "Backend .env.local exists but not configured for LocalStack"
        fi
    else
        print_warning "Backend .env.local not found"
    fi
    
    # Check frontend environment files
    if [ -f "$PROJECT_ROOT/frontend/.env.local" ]; then
        print_info "Frontend .env.local exists"
    else
        print_warning "Frontend .env.local not found"
    fi
    
    # Check Docker Compose
    if [ -f "$PROJECT_ROOT/docker-compose.local.yml" ]; then
        print_status "Docker Compose configuration found"
    else
        print_error "Docker Compose configuration not found"
    fi
    
    # Check if LocalStack is running
    if curl -s http://localhost:4566/_localstack/health >/dev/null 2>&1; then
        print_status "LocalStack is running"
    else
        print_warning "LocalStack is not running"
    fi
    
    echo ""
}

# Function to switch to LocalStack environment
switch_to_local() {
    echo "🔄 Switching to LocalStack environment..."
    
    # Create backend .env.local
    cat > "$PROJECT_ROOT/backend/.env.local" << 'EOF'
# LocalStack Environment Configuration
# Generated by switch-environment.sh

NODE_ENV=development
ENVIRONMENT=local
DEPLOYMENT_TARGET=docker

# LocalStack Configuration
IS_LOCALSTACK=true
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=test
AWS_SECRET_ACCESS_KEY=test

# LocalStack Service Endpoints
COGNITO_ENDPOINT=http://localhost:4566
DYNAMODB_ENDPOINT=http://localhost:8000
S3_ENDPOINT=http://localhost:4566
SES_ENDPOINT=http://localhost:4566

# Cognito User Pools (will be populated by setup script)
CUSTOMER_USER_POOL_ID=us-east-1_000000001
CUSTOMER_USER_POOL_CLIENT_ID=customer-client-local
CUSTOMER_USER_POOL_REGION=us-east-1
STAFF_USER_POOL_ID=us-east-1_000000002
STAFF_USER_POOL_CLIENT_ID=staff-client-local
STAFF_USER_POOL_REGION=us-east-1

# Auth Configuration
JWT_SECRET=local-dev-secret-harborlist-2025
CUSTOMER_TOKEN_TTL=86400
STAFF_TOKEN_TTL=28800

# API Configuration
API_BASE_URL=https://local-api.harborlist.com
FRONTEND_URL=https://local.harborlist.com
CORS_ORIGINS=https://local.harborlist.com,http://localhost:3000

# Email Configuration
SMTP_HOST=smtp4dev
SMTP_PORT=25
SMTP_SECURE=false
FROM_EMAIL=noreply@harborlist.local

# Database Tables
LISTINGS_TABLE=harborlist-listings
USERS_TABLE=harborlist-users
REVIEWS_TABLE=harborlist-reviews
SESSIONS_TABLE=harborlist-sessions
LOGIN_ATTEMPTS_TABLE=harborlist-login-attempts
AUDIT_LOGS_TABLE=harborlist-audit-logs
ENGINES_TABLE=harborlist-engines
BILLING_ACCOUNTS_TABLE=harborlist-billing-accounts
TRANSACTIONS_TABLE=harborlist-transactions
FINANCE_CALCULATIONS_TABLE=harborlist-finance-calculations
MODERATION_QUEUE_TABLE=harborlist-moderation-queue
USER_GROUPS_TABLE=harborlist-user-groups

# S3 Buckets
MEDIA_BUCKET=harborlist-media-local
THUMBNAILS_BUCKET=harborlist-thumbnails-local

# Payment Processors (test configuration)
STRIPE_SECRET_KEY=sk_test_local_development_key
STRIPE_WEBHOOK_SECRET=whsec_local_development_secret
PAYPAL_CLIENT_ID=local_paypal_client_id
PAYPAL_CLIENT_SECRET=local_paypal_client_secret
PAYMENT_PROCESSOR=stripe
EOF
    
    # Create frontend .env.local
    cat > "$PROJECT_ROOT/frontend/.env.local" << 'EOF'
# Frontend LocalStack Environment Configuration
# Generated by switch-environment.sh

VITE_ENVIRONMENT=local
VITE_API_URL=https://local-api.harborlist.com/api
VITE_FRONTEND_URL=https://local.harborlist.com

# Cognito Configuration (LocalStack)
VITE_CUSTOMER_USER_POOL_ID=us-east-1_000000001
VITE_CUSTOMER_USER_POOL_CLIENT_ID=customer-client-local
VITE_STAFF_USER_POOL_ID=us-east-1_000000002
VITE_STAFF_USER_POOL_CLIENT_ID=staff-client-local
VITE_COGNITO_REGION=us-east-1
VITE_COGNITO_ENDPOINT=http://localhost:4566

# Development Settings
VITE_DEBUG=true
VITE_LOG_LEVEL=debug
EOF
    
    print_status "Environment files created for LocalStack"
    print_info "Run 'docker-compose --profile enhanced up' to start LocalStack environment"
}

# Function to switch to AWS environment
switch_to_aws() {
    local env_name=$1
    
    if [ -z "$env_name" ]; then
        print_error "AWS environment name required (dev, staging, prod)"
        exit 1
    fi
    
    echo "🔄 Switching to AWS $env_name environment..."
    
    # Create backend .env.local for AWS
    cat > "$PROJECT_ROOT/backend/.env.local" << EOF
# AWS $env_name Environment Configuration
# Generated by switch-environment.sh

NODE_ENV=production
ENVIRONMENT=$env_name
DEPLOYMENT_TARGET=aws

# AWS Configuration
IS_LOCALSTACK=false
AWS_REGION=us-east-1

# Cognito User Pools (to be populated from CDK outputs)
# Run 'npm run cdk:outputs' to get actual values
CUSTOMER_USER_POOL_ID=\${CUSTOMER_USER_POOL_ID}
CUSTOMER_USER_POOL_CLIENT_ID=\${CUSTOMER_USER_POOL_CLIENT_ID}
CUSTOMER_USER_POOL_REGION=us-east-1
STAFF_USER_POOL_ID=\${STAFF_USER_POOL_ID}
STAFF_USER_POOL_CLIENT_ID=\${STAFF_USER_POOL_CLIENT_ID}
STAFF_USER_POOL_REGION=us-east-1

# Auth Configuration
JWT_SECRET=\${JWT_SECRET}
CUSTOMER_TOKEN_TTL=86400
STAFF_TOKEN_TTL=28800

# API Configuration
API_BASE_URL=\${API_BASE_URL}
FRONTEND_URL=\${FRONTEND_URL}

# Database Tables (from CDK)
LISTINGS_TABLE=\${LISTINGS_TABLE}
USERS_TABLE=\${USERS_TABLE}
REVIEWS_TABLE=\${REVIEWS_TABLE}
SESSIONS_TABLE=\${SESSIONS_TABLE}
LOGIN_ATTEMPTS_TABLE=\${LOGIN_ATTEMPTS_TABLE}
AUDIT_LOGS_TABLE=\${AUDIT_LOGS_TABLE}

# S3 Buckets (from CDK)
MEDIA_BUCKET=\${MEDIA_BUCKET}
THUMBNAILS_BUCKET=\${THUMBNAILS_BUCKET}
EOF
    
    # Create frontend .env.local for AWS
    cat > "$PROJECT_ROOT/frontend/.env.local" << EOF
# Frontend AWS $env_name Environment Configuration
# Generated by switch-environment.sh

VITE_ENVIRONMENT=$env_name
VITE_API_URL=\${VITE_API_URL}
VITE_FRONTEND_URL=\${VITE_FRONTEND_URL}

# Cognito Configuration (AWS)
VITE_CUSTOMER_USER_POOL_ID=\${VITE_CUSTOMER_USER_POOL_ID}
VITE_CUSTOMER_USER_POOL_CLIENT_ID=\${VITE_CUSTOMER_USER_POOL_CLIENT_ID}
VITE_STAFF_USER_POOL_ID=\${VITE_STAFF_USER_POOL_ID}
VITE_STAFF_USER_POOL_CLIENT_ID=\${VITE_STAFF_USER_POOL_CLIENT_ID}
VITE_COGNITO_REGION=us-east-1

# Production Settings
VITE_DEBUG=false
VITE_LOG_LEVEL=info
EOF
    
    print_status "Environment files created for AWS $env_name"
    print_warning "Remember to populate environment variables with actual CDK output values"
    print_info "Run 'npm run cdk:deploy:$env_name' to deploy to AWS"
}

# Function to validate LocalStack setup
validate_localstack() {
    echo "🔍 Validating LocalStack setup..."
    
    # Check if LocalStack is running
    if ! curl -s http://localhost:4566/_localstack/health >/dev/null 2>&1; then
        print_error "LocalStack is not running. Start it with: docker-compose --profile enhanced up"
        return 1
    fi
    
    # Check Cognito service
    if curl -s http://localhost:4566/_localstack/health | grep -q '"cognito-idp": "available"'; then
        print_status "Cognito service is available"
    else
        print_warning "Cognito service is not ready"
    fi
    
    # Check S3 service
    if curl -s http://localhost:4566/_localstack/health | grep -q '"s3": "available"'; then
        print_status "S3 service is available"
    else
        print_warning "S3 service is not ready"
    fi
    
    # Check DynamoDB
    if curl -s http://localhost:8000 >/dev/null 2>&1; then
        print_status "DynamoDB is available"
    else
        print_warning "DynamoDB is not ready"
    fi
    
    print_info "LocalStack validation completed"
}

# Main function
main() {
    case "${1:-}" in
        "local")
            switch_to_local
            validate_localstack
            ;;
        "aws")
            switch_to_aws "${2:-}"
            ;;
        "--check")
            check_environment
            ;;
        "--help"|"-h"|"")
            show_usage
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"