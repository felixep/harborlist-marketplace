#!/bin/bash

# HarborList Deployment Script
#
# Description:
#   Unified deployment script for HarborList marketplace with dual Cognito User Pool architecture.
#   Supports Docker Compose local development with LocalStack Cognito integration,
#   as well as AWS CDK deployments for cloud environments.
#
# Features:
#   - Dual Cognito User Pool architecture (Customer + Staff pools)
#   - LocalStack Cognito integration with User Pool and Group setup
#   - Enhanced Docker Compose setup with Traefik routing
#   - Custom domain support for local development
#   - SSL certificate management
#   - Comprehensive logging and error handling
#
# Usage:
#   ./deploy.sh <environment>
#
# Environments:
#   local    - Docker Compose development environment with full stack
#   dev      - AWS development environment
#   staging  - AWS staging environment  
#   prod     - AWS production environment
#
# Prerequisites:
#   For all deployments:
#   - .env.local file in project root with required environment variables
#   
#   For local deployment:
#   - Docker and Docker Compose installed
#   - LocalStack for AWS service emulation
#   - Host file entries configured:
#     127.0.0.1 local.harborlist.com
#     127.0.0.1 local-api.harborlist.com
#     127.0.0.1 traefik.local.harborlist.com
#   - SSL certificates in certs/local/ directory
#
#   For AWS deployments:
#   - AWS CLI configured
#   - CDK installed and bootstrapped
#   - Appropriate AWS credentials and permissions
#   - Cognito User Pool management permissions
#
# Examples:
#   ./deploy.sh local                    # Deploy local development environment
#   ./deploy.sh dev                      # Deploy to AWS development
#   ./deploy.sh prod                     # Deploy to AWS production
#
# Local Environment Access:
#   Frontend (Custom Domain):  https://local.harborlist.com
#   Backend API (Custom Domain): https://local-api.harborlist.com
#   Frontend (Direct):         http://localhost:3000
#   Backend API (Direct):      http://localhost:3001
#   Auth Service:              http://localhost:3001/auth
#   Traefik Dashboard:         http://localhost:8088
#   LocalStack (Cognito):      http://localhost:4566
#   DynamoDB Local:           http://localhost:8000
#   DynamoDB Admin:           http://localhost:8001
#
# Environment Configuration:
#   The script uses .env.local file for environment-specific configuration.
#   Required variables for local deployment:
#   - NODE_ENV=development
#   - AWS_REGION=us-east-1
#   - IS_LOCALSTACK=true
#   - COGNITO_ENDPOINT=http://localhost:4566
#   - CUSTOMER_USER_POOL_ID (generated by LocalStack setup)
#   - STAFF_USER_POOL_ID (generated by LocalStack setup)
#   - CUSTOMER_USER_POOL_CLIENT_ID (generated by LocalStack setup)
#   - STAFF_USER_POOL_CLIENT_ID (generated by LocalStack setup)
#
# Logging:
#   All deployment activities are logged to logs/deployment_YYYYMMDD_HHMMSS.log
#
# Author: HarborList Team
# Version: 3.3 (Enhanced .env.local integration)
# Last Updated: October 2025

set -e
set -u

# Color codes for output formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Create logs directory if it doesn't exist
mkdir -p "${PROJECT_ROOT}/logs"
LOG_FILE="${PROJECT_ROOT}/logs/deployment_${TIMESTAMP}.log"

# Initialize logging
exec > >(tee -a "${LOG_FILE}")
exec 2>&1

echo -e "${BLUE}=== HarborList Deployment Script Started ===${NC}"
echo "Timestamp: $(date)"
echo "Environment: ${1:-'not specified'}"
echo "Project Root: ${PROJECT_ROOT}"
echo "Log File: ${LOG_FILE}"
echo ""

# Function to print colored status messages
print_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
print_error() { echo -e "${RED}‚ùå $1${NC}"; }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
print_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
print_step() { echo -e "${PURPLE}üîÑ $1${NC}"; }

# Function to validate environment parameter
validate_environment() {
    local env=$1
    
    case "$env" in
        "local"|"dev"|"staging"|"prod")
            print_success "Environment '$env' is valid"
            return 0
            ;;
        *)
            print_error "Invalid environment: '$env'"
            echo "Valid environments: local, dev, staging, prod"
            echo ""
            echo "Usage: $0 <environment>"
            echo "Environments:"
            echo "  local    - Docker Compose with LocalStack Cognito (dual User Pools)"
            echo "  dev      - AWS development environment with dual Cognito User Pools"
            echo "  staging  - AWS staging environment with dual Cognito User Pools"
            echo "  prod     - AWS production environment with dual Cognito User Pools"
            echo ""
            echo "Local environment provides:"
            echo "  - Custom domains: https://local.harborlist.com, https://local-api.harborlist.com"
            echo "  - SSL termination via Traefik"
            echo "  - LocalStack Cognito with dual User Pools"
            echo "  - Automated test user creation"
            echo "  - Full service stack with monitoring tools"
            exit 1
            ;;
    esac
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check Docker prerequisites
check_docker_prerequisites() {
    print_step "Checking Docker prerequisites..."
    
    local missing_deps=()
    
    if ! command_exists docker; then
        missing_deps+=("docker")
    fi
    
    if ! command_exists docker-compose; then
        missing_deps+=("docker-compose")
    fi
    
    # Check if Docker daemon is running
    if command_exists docker && ! docker info >/dev/null 2>&1; then
        print_error "Docker daemon is not running"
        print_info "Please start Docker Desktop or Docker daemon"
        exit 1
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing Docker dependencies: ${missing_deps[*]}"
        print_info "Please install Docker Desktop: https://www.docker.com/products/docker-desktop"
        exit 1
    fi
    
    print_success "All Docker prerequisites are available"
}

# Function to check AWS prerequisites
check_aws_prerequisites() {
    print_step "Checking AWS prerequisites..."
    
    local missing_deps=()
    
    if ! command_exists aws; then
        missing_deps+=("aws-cli")
    fi
    
    if ! command_exists cdk; then
        missing_deps+=("aws-cdk")
    fi
    
    # Check AWS credentials
    if command_exists aws && ! aws sts get-caller-identity >/dev/null 2>&1; then
        print_error "AWS credentials not configured or invalid"
        print_info "Please configure AWS credentials using 'aws configure' or environment variables"
        exit 1
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing AWS dependencies: ${missing_deps[*]}"
        print_info "Please install AWS CLI and CDK:"
        print_info "  AWS CLI: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
        print_info "  AWS CDK: npm install -g aws-cdk"
        exit 1
    fi
    
    print_success "All AWS prerequisites are available"
}

# Function to ensure LocalStack Cognito setup script exists
ensure_localstack_setup_script() {
    local setup_script="${PROJECT_ROOT}/infrastructure/scripts/setup-local-cognito.sh"
    local script_dir="$(dirname "${setup_script}")"
    
    # Create directory if it doesn't exist
    mkdir -p "${script_dir}"
    
    # Check if script exists and is executable
    if [[ ! -f "${setup_script}" ]]; then
        print_error "LocalStack Cognito setup script not found: ${setup_script}"
        print_info "Please ensure the setup script exists before running deployment"
        return 1
    fi
    
    # Make sure it's executable
    chmod +x "${setup_script}"
    print_success "LocalStack Cognito setup script found and ready"
}

# Function to load environment variables from .env.local
load_env_local() {
    local env_file="${PROJECT_ROOT}/.env.local"
    
    if [[ -f "${env_file}" ]]; then
        print_info "Loading environment variables from .env.local"
        # Export variables, filtering out comments and empty lines
        set -a
        source "${env_file}"
        set +a
        print_success "Environment variables loaded from .env.local"
        
        # Display key configuration variables for debugging
        print_info "Key environment variables:"
        echo "  NODE_ENV: ${NODE_ENV:-'not set'}"
        echo "  AWS_REGION: ${AWS_REGION:-'not set'}"
        echo "  IS_LOCALSTACK: ${IS_LOCALSTACK:-'not set'}"
        echo "  COGNITO_ENDPOINT: ${COGNITO_ENDPOINT:-'not set'}"
        echo "  LOG_LEVEL: ${LOG_LEVEL:-'not set'}"
        if [[ "${IS_LOCALSTACK}" == "true" ]]; then
            echo "  LOCALSTACK_AUTH_TOKEN: ${LOCALSTACK_AUTH_TOKEN:-'not set'}"
            echo "  CUSTOMER_USER_POOL_ID: ${CUSTOMER_USER_POOL_ID:-'not set'}"
            echo "  STAFF_USER_POOL_ID: ${STAFF_USER_POOL_ID:-'not set'}"
            echo "  CUSTOMER_USER_POOL_CLIENT_ID: ${CUSTOMER_USER_POOL_CLIENT_ID:-'not set'}"
            echo "  STAFF_USER_POOL_CLIENT_ID: ${STAFF_USER_POOL_CLIENT_ID:-'not set'}"
        fi
    else
        print_warning ".env.local file not found at ${env_file}"
        print_info "Some features may not work correctly without environment configuration"
    fi
}

# Function to create default admin user
create_default_admin_user() {
    print_step "Creating default admin user in Cognito Staff User Pool..."
    
    # Check if create-admin script exists
    local admin_script="${PROJECT_ROOT}/tools/operations/create-admin-user.sh"
    if [[ ! -f "${admin_script}" ]]; then
        print_warning "Admin user creation script not found: ${admin_script}"
        return 1
    fi
    
    # Make sure it's executable
    chmod +x "${admin_script}"
    
    # Create default admin user
    print_info "Creating admin user: admin@harborlist.local with super-admin role"
    
    if "${admin_script}" \
        --environment local \
        --email "admin@harborlist.local" \
        --name "HarborList Administrator" \
        --role "super-admin" \
        --force; then
        
        print_success "Default admin user created successfully"
        print_info "Admin credentials:"
        print_info "  Email: admin@harborlist.local"
        print_info "  Role: super-admin"
        print_info "  Password: Check the output above for the generated password"
        return 0
    else
        print_error "Failed to create default admin user"
        return 1
    fi
}

# Function to setup LocalStack Cognito User Pools
setup_localstack_cognito() {
    print_step "Setting up LocalStack Cognito User Pools..."
    
    # Load environment variables for LocalStack configuration
    load_env_local
    
    # Ensure setup script exists (don't overwrite existing)
    if ! ensure_localstack_setup_script; then
        return 1
    fi
    
    local setup_script="${PROJECT_ROOT}/infrastructure/scripts/setup-local-cognito.sh"
    
    print_info "Running LocalStack Cognito setup script..."
    
    # Wait for LocalStack to be ready
    local timeout=60
    local counter=0
    while ! curl -s http://localhost:4566/health > /dev/null; do
        if [ $counter -eq $timeout ]; then
            print_error "LocalStack failed to start within $timeout seconds"
            return 1
        fi
        print_info "Waiting for LocalStack... ($counter/$timeout)"
        sleep 1
        counter=$((counter + 1))
    done
    
    print_success "LocalStack is ready!"
    
    # Run the setup script with correct endpoint
    if LOCALSTACK_ENDPOINT=http://localhost:4566 "${setup_script}"; then
        print_success "LocalStack Cognito User Pools configured successfully"
        
        # Display setup completion
        echo ""
        print_info "LocalStack Cognito Configuration Complete:"
        echo "  Customer User Pool: Configured with groups (individual-customers, dealer-customers, premium-customers)"
        echo "  Staff User Pool: Configured with groups (super-admin, admin, manager, team-member)"
        echo "  No test users created - use create-admin-user script to create admin users as needed"
        
        return 0
    else
        print_error "LocalStack Cognito setup failed"
        return 1
    fi
}

# Function to validate authentication setup
validate_authentication() {
    local environment=$1
    
    print_step "Validating authentication setup for ${environment}..."
    
    if [[ "${environment}" == "local" ]]; then
        # Test LocalStack authentication
        local auth_test_script="${PROJECT_ROOT}/infrastructure/scripts/test-local-auth.sh"
        
        if [[ -f "${auth_test_script}" ]]; then
            print_info "Running authentication validation tests..."
            chmod +x "${auth_test_script}"
            
            if "${auth_test_script}"; then
                print_success "Local authentication validation passed"
                return 0
            else
                print_warning "Authentication validation failed, but deployment will continue"
                print_info "You can run tests manually: ${auth_test_script}"
                return 1
            fi
        else
            print_warning "Authentication test script not found: ${auth_test_script}"
            print_info "Skipping authentication validation"
            return 1
        fi
    else
        # For AWS environments, check if User Pools exist
        print_info "Checking AWS Cognito User Pools for ${environment}..."
        
        # This would be populated from CDK outputs in a real deployment
        print_info "AWS Cognito validation requires CDK deployment completion"
        print_info "User Pools will be validated after CDK deployment"
        return 0
    fi
}

# Function to deploy to AWS
deploy_aws() {
    local environment=$1
    
    print_step "Starting AWS deployment for environment: ${environment}..."
    
    cd "${PROJECT_ROOT}"
    
    # Load environment variables from .env.local for configuration
    load_env_local
    
    # Build backend services
    print_step "Building backend services..."
    if [[ -f "backend/package.json" ]]; then
        cd backend
        npm install
        npm run build
        cd ..
    else
        print_warning "Backend package.json not found, skipping backend build"
    fi
    
    # Build frontend
    print_step "Building frontend..."
    if [[ -f "frontend/package.json" ]]; then
        cd frontend
        npm install
        npm run build
        cd ..
    else
        print_warning "Frontend package.json not found, skipping frontend build"
    fi
    
    # Deploy infrastructure
    print_step "Deploying AWS infrastructure..."
    cd infrastructure
    
    # Install CDK dependencies
    if [[ -f "package.json" ]]; then
        npm install
    fi
    
    # Bootstrap CDK if needed
    print_step "Bootstrapping CDK (if needed)..."
    cdk bootstrap || print_warning "CDK bootstrap failed, continuing..."
    
    # Deploy the Cognito authentication stacks first
    print_step "Deploying Cognito authentication stacks for ${environment}..."
    case "${environment}" in
        "dev")
            print_info "Deploying Customer Auth Stack..."
            cdk deploy CustomerAuthStack-dev --context environment=dev --require-approval never
            
            print_info "Deploying Staff Auth Stack..."
            cdk deploy StaffAuthStack-dev --context environment=dev --require-approval never
            
            print_info "Deploying Dual Auth Authorizers..."
            cdk deploy DualAuthAuthorizersConstruct-dev --context environment=dev --require-approval never
            
            print_info "Deploying main application stack..."
            cdk deploy HarborListStack-dev --context environment=dev --require-approval never
            ;;
        "staging")
            print_info "Deploying Customer Auth Stack..."
            cdk deploy CustomerAuthStack-staging --context environment=staging --require-approval never
            
            print_info "Deploying Staff Auth Stack..."
            cdk deploy StaffAuthStack-staging --context environment=staging --require-approval never
            
            print_info "Deploying Dual Auth Authorizers..."
            cdk deploy DualAuthAuthorizersConstruct-staging --context environment=staging --require-approval never
            
            print_info "Deploying main application stack..."
            cdk deploy HarborListStack-staging --context environment=staging --require-approval never
            ;;
        "prod")
            print_warning "Production deployment requires manual approval"
            print_info "Deploying Customer Auth Stack..."
            cdk deploy CustomerAuthStack-prod --context environment=prod
            
            print_info "Deploying Staff Auth Stack..."
            cdk deploy StaffAuthStack-prod --context environment=prod
            
            print_info "Deploying Dual Auth Authorizers..."
            cdk deploy DualAuthAuthorizersConstruct-prod --context environment=prod
            
            print_info "Deploying main application stack..."
            cdk deploy HarborListStack-prod --context environment=prod
            ;;
        *)
            print_error "Unknown AWS environment: ${environment}"
            exit 1
            ;;
    esac
    
    # Extract and display CDK outputs
    print_step "Extracting CDK stack outputs..."
    
    print_info "Customer Auth Stack outputs:"
    aws cloudformation describe-stacks \
        --stack-name CustomerAuthStack-${environment} \
        --query 'Stacks[0].Outputs' \
        --output table 2>/dev/null || print_warning "Could not retrieve Customer Auth Stack outputs"
    
    print_info "Staff Auth Stack outputs:"
    aws cloudformation describe-stacks \
        --stack-name StaffAuthStack-${environment} \
        --query 'Stacks[0].Outputs' \
        --output table 2>/dev/null || print_warning "Could not retrieve Staff Auth Stack outputs"
    
    cd "${PROJECT_ROOT}"
    
    print_success "AWS deployment completed for environment: ${environment}!"
    
    # Validate authentication setup
    if validate_authentication "${environment}"; then
        print_success "AWS authentication validation completed"
    else
        print_warning "AWS authentication validation had issues"
    fi
    
    # Display AWS access information
    echo ""
    print_info "AWS Environment Access Information:"
    echo "  Environment: ${environment}"
    echo "  Check AWS Console for deployed resources"
    echo "  API Gateway URL will be displayed in CDK outputs"
    echo "  Frontend URL will be displayed in CDK outputs"
    echo ""
    print_info "AWS Cognito User Pools:"
    echo "  Customer Pool: CustomerAuthStack-${environment}"
    echo "  Staff Pool: StaffAuthStack-${environment}"
    echo "  Check AWS Console > Cognito for User Pool details"
    
    echo ""
    print_info "Useful AWS commands:"
    echo "  View all stacks: cdk list"
    echo "  View Customer Auth outputs: aws cloudformation describe-stacks --stack-name CustomerAuthStack-${environment}"
    echo "  View Staff Auth outputs: aws cloudformation describe-stacks --stack-name StaffAuthStack-${environment}"
    echo "  View main stack outputs: aws cloudformation describe-stacks --stack-name HarborListStack-${environment}"
    echo "  View Cognito User Pools: aws cognito-idp list-user-pools --max-results 20"
    echo "  View logs: aws logs describe-log-groups --log-group-name-prefix /aws/lambda/HarborListStack"
}

# Function to deploy with Docker Compose
deploy_local() {
    print_step "Starting local Docker Compose deployment..."
    
    cd "${PROJECT_ROOT}"
    
    # Load environment variables from .env.local
    load_env_local
    
    # Check for Docker Compose file
    if [[ ! -f "docker-compose.local.yml" ]]; then
        print_error "docker-compose.local.yml not found in project root"
        exit 1
    fi
    
    # Check for .env.local file
    if [[ ! -f ".env.local" ]]; then
        print_error ".env.local file not found in project root"
        print_info "Please create .env.local file with required environment variables"
        exit 1
    fi
    
    print_step "Setting up SSL certificates for local development..."
    
    # Check if SSL certificates exist, generate if needed
    if [[ ! -f "${PROJECT_ROOT}/certs/local/server-cert.pem" ]] || [[ ! -f "${PROJECT_ROOT}/certs/local/server-key.pem" ]]; then
        print_info "SSL certificates not found, generating new ones..."
        if [[ -f "${PROJECT_ROOT}/tools/ssl/generate-ssl-certs.sh" ]]; then
            "${PROJECT_ROOT}/tools/ssl/generate-ssl-certs.sh"
        else
            print_warning "SSL certificate generation script not found"
            print_info "Please run: ./tools/ssl/generate-ssl-certs.sh"
        fi
    else
        print_success "SSL certificates already exist"
    fi
    
    print_step "Building and starting Docker services..."
    
    print_info "Deploying full stack with Traefik routing and custom domains"
    
    # Stop any existing services
    print_step "Stopping existing services..."
    docker-compose -f docker-compose.local.yml --env-file .env.local down --remove-orphans || true
    
    # Pull latest images and build
    print_step "Building services..."
    docker-compose -f docker-compose.local.yml --env-file .env.local build --no-cache
    
    # Start services
    print_step "Starting services..."
    docker-compose -f docker-compose.local.yml --env-file .env.local up -d
    
    # Wait for services to be ready
    print_step "Waiting for services to start..."
    sleep 15
    
    # Setup LocalStack Cognito User Pools
    if setup_localstack_cognito; then
        print_success "LocalStack Cognito setup completed"
    else
        print_warning "LocalStack Cognito setup failed, but deployment will continue"
        print_info "You may need to run the setup manually later"
    fi
    
    # Show service status
    print_step "Checking service status..."
    docker-compose -f docker-compose.local.yml --env-file .env.local ps
    
    # Set up database tables
    print_step "Setting up database tables..."
    if [[ -f "${PROJECT_ROOT}/backend/scripts/setup-local-db.sh" ]]; then
        # Pass environment variables to the database setup script
        env $(cat "${PROJECT_ROOT}/.env.local" | grep -v '^#' | xargs) "${PROJECT_ROOT}/backend/scripts/setup-local-db.sh"
    else
        print_warning "Database setup script not found. You may need to run it manually."
        print_info "Run: ./backend/scripts/setup-local-db.sh"
    fi
    
    # Set up S3 buckets for media storage
    print_step "Setting up S3 buckets for media storage..."
    if [[ -f "${PROJECT_ROOT}/tools/development/setup-s3-buckets.sh" ]]; then
        # Pass environment variables to the S3 setup script
        env $(cat "${PROJECT_ROOT}/.env.local" | grep -v '^#' | xargs) "${PROJECT_ROOT}/tools/development/setup-s3-buckets.sh"
        if [[ $? -eq 0 ]]; then
            print_success "S3 buckets configured successfully"
        else
            print_warning "S3 bucket setup encountered issues, but deployment will continue"
            print_info "You can run it manually: ./tools/development/setup-s3-buckets.sh"
        fi
    else
        print_warning "S3 bucket setup script not found. Media uploads may not work."
        print_info "Run: ./tools/development/setup-s3-buckets.sh"
    fi
    
    # Validate authentication setup
    if validate_authentication "local"; then
        print_success "Authentication validation completed"
    else
        print_warning "Authentication validation had issues, but deployment will continue"
    fi
    
    # LocalStack Cognito User Pools are configured and ready for user creation
    print_success "LocalStack Cognito User Pools configured and ready"
    
    # Create default admin user
    print_step "Creating default admin user..."
    if create_default_admin_user; then
        print_success "Default admin user created successfully"
    else
        print_warning "Failed to create default admin user, but deployment will continue"
        print_info "You can create admin users manually using: tools/operations/create-admin-user.sh"
    fi
    
    print_success "Local deployment completed!"
    
    # Display access information
    echo ""
    print_info "Local Environment Access Information:"
    echo "  Frontend (Custom Domain): https://local.harborlist.com"
    echo "  Backend API (Custom Domain): https://local-api.harborlist.com"
    echo "  Auth Service (Custom Domain): https://local-api.harborlist.com/auth"
    echo "  Billing Service (Custom Domain): https://billing.local.harborlist.com"
    echo "  Finance Service (Custom Domain): https://finance.local.harborlist.com"
    echo "  Frontend (Direct): http://localhost:3000"
    echo "  Backend API (Direct): http://localhost:3001"
    echo "  Auth Service (Direct): http://localhost:3001/auth"
    echo "  Billing Service (Direct): http://localhost:3002"
    echo "  Finance Service (Direct): http://localhost:3003"
    echo "  Traefik Dashboard: http://localhost:8088"
    echo "  LocalStack (Cognito): http://localhost:4566"
    echo "  DynamoDB Local: http://localhost:8000"
    echo "  DynamoDB Admin: http://localhost:8001"
    echo "  LocalStack (S3): http://localhost:4566"
    echo "  SMTP4Dev (Email Testing): http://localhost:5001"
    
    echo ""
    print_info "User Management:"
    echo "  Customer registration: Available via auth service endpoints"
    echo "  Admin user creation: Use tools/operations/create-admin-user.sh script"
    echo "  User management: Available via admin interface after creating admin users"
    echo "  No test users created automatically - create users as needed"
    echo ""
    print_info "Authentication Endpoints:"
    echo "  Customer Login: POST http://localhost:3001/auth/customer/login"
    echo "  Staff Login: POST http://localhost:3001/auth/staff/login"
    echo "  Customer Register: POST http://localhost:3001/auth/customer/register"
    echo "  Token Refresh: POST http://localhost:3001/auth/{customer|staff}/refresh"
    
    echo ""
    print_info "Useful Docker Compose commands:"
    echo "  View logs: docker-compose -f docker-compose.local.yml --env-file .env.local logs -f"
    echo "  Stop services: docker-compose -f docker-compose.local.yml --env-file .env.local down"
    echo "  Rebuild: docker-compose -f docker-compose.local.yml --env-file .env.local up --build -d"
    
    echo ""
    print_warning "Note: For custom domains to work, add these entries to your /etc/hosts file:"
    echo "  127.0.0.1 local.harborlist.com"
    echo "  127.0.0.1 local-api.harborlist.com"
    echo "  127.0.0.1 billing.local.harborlist.com"
    echo "  127.0.0.1 finance.local.harborlist.com"
    echo "  127.0.0.1 mail.local.harborlist.com"
    echo "  127.0.0.1 s3.local.harborlist.com"
    echo "  127.0.0.1 traefik.local.harborlist.com"
}

# Main execution logic
main() {
    # Check if environment parameter is provided
    if [[ $# -eq 0 ]]; then
        print_error "Environment parameter is required"
        echo ""
        echo "Usage: $0 <environment>"
        echo ""
        echo "Environments:"
        echo "  local    - Docker Compose with LocalStack Cognito (dual User Pools)"
        echo "  dev      - AWS development environment with dual Cognito User Pools"
        echo "  staging  - AWS staging environment with dual Cognito User Pools"
        echo "  prod     - AWS production environment with dual Cognito User Pools"
        echo ""
        echo "Example: $0 local"
        echo ""
        echo "Authentication Architecture:"
        echo "  - Customer User Pool: Individual, Dealer, Premium tiers"
        echo "  - Staff User Pool: Super Admin, Admin, Manager, Team Member roles"
        echo "  - Cross-pool security with separate authorizers"
        echo ""
        echo "For more information, see the script header documentation."
        exit 1
    fi
    
    local environment=$1
    
    # Validate environment
    validate_environment "${environment}"
    
    # Load environment variables early for all deployment types
    print_step "Loading environment configuration..."
    load_env_local
    
    # Check prerequisites based on deployment target
    if [[ "${environment}" == "local" ]]; then
        check_docker_prerequisites
        deploy_local
    else
        check_aws_prerequisites
        deploy_aws "${environment}"
    fi
    
    print_success "Deployment process completed successfully!"
    print_info "Log file saved to: ${LOG_FILE}"
}

# Execute main function with all arguments
main "$@"
