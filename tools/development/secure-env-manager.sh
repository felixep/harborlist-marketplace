#!/bin/bash

# Secure Environment Configuration Manager
#
# This script safely manages environment variables while preserving
# sensitive values like LocalStack auth tokens.
#
# Features:
# - Preserves existing LocalStack auth token
# - Updates Cognito configuration without overwriting sensitive data
# - Creates backups before making changes
# - Validates token format and configuration

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_success() { echo -e "${GREEN}✅ $1${NC}"; }
print_error() { echo -e "${RED}❌ $1${NC}"; }
print_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
print_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"
ENV_LOCAL_FILE="${PROJECT_ROOT}/.env.local"
ENV_BACKUP_DIR="${PROJECT_ROOT}/.env-backups"

# Create backup directory
mkdir -p "${ENV_BACKUP_DIR}"

# Function to backup current .env.local
backup_env_local() {
    if [[ -f "${ENV_LOCAL_FILE}" ]]; then
        local timestamp=$(date +"%Y%m%d_%H%M%S")
        local backup_file="${ENV_BACKUP_DIR}/.env.local.backup.${timestamp}"
        cp "${ENV_LOCAL_FILE}" "${backup_file}"
        print_success "Created backup: ${backup_file}"
    fi
}

# Function to extract existing LocalStack token
extract_existing_token() {
    if [[ -f "${ENV_LOCAL_FILE}" ]]; then
        local token=$(grep "^LOCALSTACK_AUTH_TOKEN=" "${ENV_LOCAL_FILE}" | cut -d'=' -f2)
        if [[ -n "${token}" && "${token}" != "your-localstack-pro-auth-token-here" && "${token}" != "" ]]; then
            echo "${token}"
        fi
    fi
}

# Function to validate LocalStack token format
validate_token() {
    local token="$1"
    if [[ "${token}" =~ ^ls-[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to safely update Cognito configuration
update_cognito_config() {
    local customer_pool_id="$1"
    local customer_client_id="$2"
    local staff_pool_id="$3"
    local staff_client_id="$4"
    
    print_info "Updating Cognito configuration while preserving LocalStack token..."
    
    # Backup current configuration
    backup_env_local
    
    # Extract existing token
    local existing_token=$(extract_existing_token)
    
    if [[ -z "${existing_token}" ]]; then
        print_error "No valid LocalStack token found in existing configuration"
        print_info "Please set LOCALSTACK_AUTH_TOKEN manually before running this script"
        return 1
    fi
    
    if ! validate_token "${existing_token}"; then
        print_error "Invalid LocalStack token format: ${existing_token}"
        return 1
    fi
    
    print_success "Found valid LocalStack token: ${existing_token:0:15}..."
    
    # Create new configuration with preserved token
    cat > "${ENV_LOCAL_FILE}" << EOF
# LocalStack Cognito Configuration
# Generated by secure environment manager
# IMPORTANT: LocalStack auth token is preserved and should not be modified

# Customer User Pool
CUSTOMER_USER_POOL_ID=${customer_pool_id}
CUSTOMER_USER_POOL_CLIENT_ID=${customer_client_id}

# Staff User Pool
STAFF_USER_POOL_ID=${staff_pool_id}
STAFF_USER_POOL_CLIENT_ID=${staff_client_id}

# LocalStack Configuration
AWS_REGION=us-east-1
COGNITO_ENDPOINT=http://localhost:4566
IS_LOCALSTACK=true

# LocalStack Pro Auth Token - PRESERVED FROM EXISTING CONFIGURATION
# DO NOT MODIFY - This token is required for LocalStack Pro features
LOCALSTACK_AUTH_TOKEN=${existing_token}

# AWS Test Credentials for LocalStack
AWS_ACCESS_KEY_ID=test
AWS_SECRET_ACCESS_KEY=test

# Development Settings
NODE_ENV=development
LOG_LEVEL=debug
EOF
    
    print_success "Configuration updated successfully with preserved LocalStack token"
    return 0
}

# Function to verify configuration
verify_configuration() {
    print_info "Verifying configuration..."
    
    if [[ ! -f "${ENV_LOCAL_FILE}" ]]; then
        print_error ".env.local file not found"
        return 1
    fi
    
    # Check required variables
    local required_vars=("CUSTOMER_USER_POOL_ID" "CUSTOMER_USER_POOL_CLIENT_ID" "STAFF_USER_POOL_ID" "STAFF_USER_POOL_CLIENT_ID" "LOCALSTACK_AUTH_TOKEN")
    
    for var in "${required_vars[@]}"; do
        if ! grep -q "^${var}=" "${ENV_LOCAL_FILE}"; then
            print_error "Missing required variable: ${var}"
            return 1
        fi
        
        local value=$(grep "^${var}=" "${ENV_LOCAL_FILE}" | cut -d'=' -f2)
        if [[ -z "${value}" ]]; then
            print_error "Empty value for required variable: ${var}"
            return 1
        fi
    done
    
    # Validate LocalStack token
    local token=$(grep "^LOCALSTACK_AUTH_TOKEN=" "${ENV_LOCAL_FILE}" | cut -d'=' -f2)
    if ! validate_token "${token}"; then
        print_error "Invalid LocalStack token format"
        return 1
    fi
    
    print_success "Configuration verification passed"
    return 0
}

# Function to show current configuration (with masked token)
show_configuration() {
    print_info "Current environment configuration:"
    
    if [[ -f "${ENV_LOCAL_FILE}" ]]; then
        while IFS= read -r line; do
            if [[ $line == LOCALSTACK_AUTH_TOKEN=* ]]; then
                local token=$(echo "$line" | cut -d'=' -f2)
                echo "  LOCALSTACK_AUTH_TOKEN=${token:0:15}...[MASKED]"
            elif [[ $line =~ ^[A-Z_]+=.+ ]]; then
                echo "  $line"
            fi
        done < "${ENV_LOCAL_FILE}"
    else
        print_error ".env.local file not found"
    fi
}

# Main execution
main() {
    echo -e "${BLUE}=== Secure Environment Configuration Manager ===${NC}"
    echo ""
    
    case "${1:-show}" in
        "update")
            if [[ $# -eq 5 ]]; then
                update_cognito_config "$2" "$3" "$4" "$5"
            else
                print_error "Usage: $0 update <customer_pool_id> <customer_client_id> <staff_pool_id> <staff_client_id>"
                exit 1
            fi
            ;;
        "verify")
            verify_configuration
            ;;
        "show")
            show_configuration
            ;;
        "backup")
            backup_env_local
            ;;
        *)
            echo "Usage: $0 [command]"
            echo ""
            echo "Commands:"
            echo "  show    - Show current configuration (default)"
            echo "  verify  - Verify configuration is valid"
            echo "  backup  - Create backup of current configuration"
            echo "  update  - Update Cognito config while preserving token"
            echo ""
            echo "Example:"
            echo "  $0 update us-east-1_ABC123 client123 us-east-1_DEF456 client456"
            exit 1
            ;;
    esac
}

# Execute main function
main "$@"