name: Deploy to Development

on:
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Type "deploy" to confirm deployment to development environment'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
      - name: Validate deployment confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_deployment }}" != "deploy" ]; then
            echo "❌ Deployment confirmation failed. Please type 'deploy' to confirm."
            exit 1
          fi
          echo "✅ Deployment confirmed for development environment"

  pre-deployment-checks:
    runs-on: ubuntu-latest
    needs: validate-input
    outputs:
      should-deploy: ${{ steps.checks.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci
          cd ../infrastructure && npm ci

      - name: Run tests
        if: ${{ github.event.inputs.skip_tests != 'true' }}
        run: |
          echo "🧪 Running backend tests..."
          cd backend && npm test
          
          echo "🧪 Running frontend tests..."
          cd ../frontend && npm test -- --run
          
          echo "🧪 Running infrastructure tests..."
          cd ../infrastructure && npm test

      - name: Lint code
        run: |
          echo "🔍 Linting backend code..."
          cd backend && npm run lint
          
          echo "🔍 Linting frontend code..."
          cd ../frontend && npm run lint

      - name: Security scan
        run: |
          echo "🔒 Running security audit..."
          cd backend && npm audit --audit-level=high
          cd ../frontend && npm audit --audit-level=high
          cd ../infrastructure && npm audit --audit-level=high

      - name: Set deployment flag
        id: checks
        run: echo "should-deploy=true" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build backend
        run: |
          echo "🏗️ Building backend..."
          cd backend
          npm ci
          npm run build

      - name: Build frontend
        run: |
          echo "🏗️ Building frontend..."
          cd frontend
          npm ci
          npm run build

      - name: Prepare infrastructure
        run: |
          echo "🏗️ Preparing infrastructure..."
          cd infrastructure
          npm ci
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-dev
          path: |
            backend/dist/
            frontend/dist/
            infrastructure/cdk.out/
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build]
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    environment:
      name: development
      url: https://dev.boatlistings.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-dev

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to development
        run: |
          echo "🚀 Deploying to development environment..."
          chmod +x ./scripts/deployment/deploy-dev.sh
          ./scripts/deployment/deploy-dev.sh

      - name: Verify deployment
        run: |
          echo "✅ Verifying deployment..."
          # Wait for services to be ready
          sleep 30
          
          # Basic health checks
          curl -f https://dev.boatlistings.com/health || echo "⚠️ Health check failed"
          
          echo "📊 Deployment verification completed"

      - name: Update deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Development deployment completed successfully"
            echo "🌐 Application URL: https://dev.boatlistings.com"
          else
            echo "❌ Development deployment failed"
            echo "📋 Check the logs above for details"
          fi

  post-deployment:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Development deployment notification: SUCCESS"
            echo "Environment: Development"
            echo "URL: https://dev.boatlistings.com"
            echo "Deployed by: ${{ github.actor }}"
            echo "Commit: ${{ github.sha }}"
          else
            echo "❌ Development deployment notification: FAILED"
            echo "Environment: Development" 
            echo "Deployed by: ${{ github.actor }}"
            echo "Commit: ${{ github.sha }}"
            echo "Please check the workflow logs for details"
          fi

      - name: Cleanup artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: deployment-logs-dev-${{ github.run_number }}
          pattern: build-artifacts-dev
          delete-merged: true