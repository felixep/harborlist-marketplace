name: Security Scan

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to scan'
        required: true
        type: choice
        options:
          - 'dev'
          - 'staging'
          - 'production'
        default: 'staging'
      scan_type:
        description: 'Type of security scan'
        required: true
        type: choice
        options:
          - 'vulnerability-scan'
          - 'dependency-audit'
          - 'code-analysis'
          - 'infrastructure-scan'
          - 'penetration-test'
          - 'comprehensive'
        default: 'vulnerability-scan'
      severity_threshold:
        description: 'Minimum severity level to report'
        required: false
        type: choice
        options:
          - 'low'
          - 'moderate'
          - 'high'
          - 'critical'
        default: 'moderate'
      confirm_scan:
        description: 'Type "scan" to confirm security scanning'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  validate-input:
    runs-on: ubuntu-latest
    outputs:
      should-proceed: ${{ steps.validation.outputs.should-proceed }}
      base-url: ${{ steps.validation.outputs.base-url }}
    steps:
      - name: Validate scan confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_scan }}" != "scan" ]; then
            echo "‚ùå Scan confirmation failed. Please type 'scan' to confirm."
            exit 1
          fi
          echo "‚úÖ Security scan confirmed for ${{ github.event.inputs.environment }} environment"

      - name: Set environment URL
        id: validation
        run: |
          case "${{ github.event.inputs.environment }}" in
            "dev")
              echo "base-url=https://dev.boatlistings.com" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "base-url=https://staging.boatlistings.com" >> $GITHUB_OUTPUT
              ;;
            "production")
              echo "base-url=https://boatlistings.com" >> $GITHUB_OUTPUT
              ;;
          esac
          echo "should-proceed=true" >> $GITHUB_OUTPUT

  production-approval:
    runs-on: ubuntu-latest
    needs: validate-input
    if: needs.validate-input.outputs.should-proceed == 'true' && github.event.inputs.environment == 'production'
    environment:
      name: production-security-scanning
    steps:
      - name: Production security scanning approval
        run: |
          echo "üîí Manual approval required for production security scanning"
          echo "Scan type: ${{ github.event.inputs.scan_type }}"
          echo "Severity threshold: ${{ github.event.inputs.severity_threshold }}"
          echo "Requested by: ${{ github.actor }}"

  setup-security-tools:
    runs-on: ubuntu-latest
    needs: [validate-input, production-approval]
    if: always() && needs.validate-input.outputs.should-proceed == 'true' && (github.event.inputs.environment != 'production' || needs.production-approval.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install security scanning tools
        run: |
          echo "üõ†Ô∏è Installing security scanning tools..."
          
          # Install npm audit
          npm install -g npm@latest
          
          # Install Snyk CLI
          npm install -g snyk
          
          # Install OWASP ZAP CLI tools
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install zaproxy
          
          # Install Trivy for container scanning
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Install Semgrep for static analysis
          pip3 install semgrep
          
          # Verify installations
          npm audit --version
          snyk --version || echo "Snyk not authenticated"
          trivy --version
          semgrep --version

      - name: Upload security tools info
        run: |
          echo "Security tools installed successfully" > security-tools-info.txt
          echo "npm audit: $(npm audit --version)" >> security-tools-info.txt
          echo "trivy: $(trivy --version)" >> security-tools-info.txt
          echo "semgrep: $(semgrep --version)" >> security-tools-info.txt

      - name: Upload tools info
        uses: actions/upload-artifact@v4
        with:
          name: security-tools-info
          path: security-tools-info.txt
          retention-days: 7

  vulnerability-scan:
    runs-on: ubuntu-latest
    needs: [validate-input, setup-security-tools]
    if: |
      needs.setup-security-tools.result == 'success' &&
      (github.event.inputs.scan_type == 'vulnerability-scan' || github.event.inputs.scan_type == 'comprehensive')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci
          cd ../infrastructure && npm ci

      - name: Run vulnerability scan
        run: |
          echo "üîç Running vulnerability scan..."
          
          mkdir -p security-reports
          
          # Backend vulnerability scan
          echo "Scanning backend dependencies..."
          cd backend
          npm audit --audit-level=${{ github.event.inputs.severity_threshold }} --json > ../security-reports/backend-vulnerabilities.json || echo "Backend vulnerabilities found"
          
          # Frontend vulnerability scan
          echo "Scanning frontend dependencies..."
          cd ../frontend
          npm audit --audit-level=${{ github.event.inputs.severity_threshold }} --json > ../security-reports/frontend-vulnerabilities.json || echo "Frontend vulnerabilities found"
          
          # Infrastructure vulnerability scan
          echo "Scanning infrastructure dependencies..."
          cd ../infrastructure
          npm audit --audit-level=${{ github.event.inputs.severity_threshold }} --json > ../security-reports/infrastructure-vulnerabilities.json || echo "Infrastructure vulnerabilities found"

      - name: Upload vulnerability scan results
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-scan-results
          path: security-reports/
          retention-days: 30

  dependency-audit:
    runs-on: ubuntu-latest
    needs: [validate-input, setup-security-tools]
    if: |
      needs.setup-security-tools.result == 'success' &&
      (github.event.inputs.scan_type == 'dependency-audit' || github.event.inputs.scan_type == 'comprehensive')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Snyk
        run: npm install -g snyk

      - name: Run dependency audit
        run: |
          echo "üîç Running dependency audit..."
          
          mkdir -p security-reports
          
          # Snyk test for backend
          echo "Auditing backend dependencies with Snyk..."
          cd backend
          snyk test --json > ../security-reports/backend-snyk-audit.json || echo "Backend dependency issues found"
          
          # Snyk test for frontend
          echo "Auditing frontend dependencies with Snyk..."
          cd ../frontend
          snyk test --json > ../security-reports/frontend-snyk-audit.json || echo "Frontend dependency issues found"
          
          # Snyk test for infrastructure
          echo "Auditing infrastructure dependencies with Snyk..."
          cd ../infrastructure
          snyk test --json > ../security-reports/infrastructure-snyk-audit.json || echo "Infrastructure dependency issues found"

      - name: Upload dependency audit results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-results
          path: security-reports/
          retention-days: 30

  code-analysis:
    runs-on: ubuntu-latest
    needs: [validate-input, setup-security-tools]
    if: |
      needs.setup-security-tools.result == 'success' &&
      (github.event.inputs.scan_type == 'code-analysis' || github.event.inputs.scan_type == 'comprehensive')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Semgrep
        run: pip3 install semgrep

      - name: Run static code analysis
        run: |
          echo "üîç Running static code analysis..."
          
          mkdir -p security-reports
          
          # Run Semgrep security analysis
          echo "Running Semgrep security analysis..."
          semgrep --config=auto --json --output=security-reports/semgrep-security-analysis.json . || echo "Security issues found in code"
          
          # Run Semgrep for specific security patterns
          echo "Running targeted security pattern analysis..."
          semgrep --config=p/security-audit --json --output=security-reports/semgrep-security-patterns.json . || echo "Security patterns found"
          
          # Run Semgrep for OWASP Top 10
          echo "Running OWASP Top 10 analysis..."
          semgrep --config=p/owasp-top-ten --json --output=security-reports/semgrep-owasp-top10.json . || echo "OWASP issues found"

      - name: Upload code analysis results
        uses: actions/upload-artifact@v4
        with:
          name: code-analysis-results
          path: security-reports/
          retention-days: 30

  infrastructure-scan:
    runs-on: ubuntu-latest
    needs: [validate-input, setup-security-tools]
    if: |
      needs.setup-security-tools.result == 'success' &&
      (github.event.inputs.scan_type == 'infrastructure-scan' || github.event.inputs.scan_type == 'comprehensive')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: 'us-east-1'

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run infrastructure security scan
        run: |
          echo "üîç Running infrastructure security scan..."
          
          mkdir -p security-reports
          
          # Scan CloudFormation templates
          echo "Scanning CloudFormation templates..."
          if [ -d "infrastructure/cdk.out" ]; then
            trivy config infrastructure/cdk.out --format json --output security-reports/infrastructure-trivy-scan.json || echo "Infrastructure issues found"
          fi
          
          # Scan Dockerfile if exists
          if [ -f "Dockerfile" ]; then
            echo "Scanning Dockerfile..."
            trivy config Dockerfile --format json --output security-reports/dockerfile-trivy-scan.json || echo "Dockerfile issues found"
          fi
          
          # Scan for secrets in code
          echo "Scanning for secrets..."
          trivy fs --scanners secret --format json --output security-reports/secrets-scan.json . || echo "Potential secrets found"

      - name: Run custom infrastructure scan
        run: |
          echo "üîç Running custom infrastructure security scan..."
          
          # Run the security scan script from the repository
          chmod +x ./scripts/operations/security-scan.sh
          ./scripts/operations/security-scan.sh \
            --environment=${{ github.event.inputs.environment }} \
            --type=infrastructure \
            --output-format=json \
            --output-file=security-reports/custom-infrastructure-scan.json || echo "‚ö†Ô∏è Custom security scan script not found"

      - name: Upload infrastructure scan results
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-scan-results
          path: security-reports/
          retention-days: 30

  penetration-test:
    runs-on: ubuntu-latest
    needs: [validate-input, setup-security-tools]
    if: |
      needs.setup-security-tools.result == 'success' &&
      (github.event.inputs.scan_type == 'penetration-test' || github.event.inputs.scan_type == 'comprehensive') &&
      github.event.inputs.environment != 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OWASP ZAP
        run: |
          echo "üõ†Ô∏è Installing OWASP ZAP..."
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install zaproxy

      - name: Run basic penetration test
        run: |
          echo "üîç Running basic penetration test..."
          
          mkdir -p security-reports
          BASE_URL="${{ needs.validate-input.outputs.base-url }}"
          
          # Basic security headers check
          echo "Checking security headers..."
          curl -I "$BASE_URL" > security-reports/security-headers.txt 2>&1 || echo "Failed to check headers"
          
          # SSL/TLS configuration check
          echo "Checking SSL/TLS configuration..."
          echo | openssl s_client -connect $(echo $BASE_URL | sed 's|https://||'):443 -servername $(echo $BASE_URL | sed 's|https://||') 2>/dev/null | openssl x509 -noout -text > security-reports/ssl-certificate.txt || echo "Failed to check SSL"
          
          # Basic vulnerability scan with curl
          echo "Running basic vulnerability checks..."
          
          # Check for common security issues
          echo "## Basic Security Check Results" > security-reports/basic-pentest-results.md
          echo "**Target:** $BASE_URL" >> security-reports/basic-pentest-results.md
          echo "**Date:** $(date)" >> security-reports/basic-pentest-results.md
          echo "" >> security-reports/basic-pentest-results.md
          
          # Test for common vulnerabilities
          echo "### Security Headers Check" >> security-reports/basic-pentest-results.md
          if curl -I "$BASE_URL" 2>/dev/null | grep -i "x-frame-options"; then
            echo "‚úÖ X-Frame-Options header present" >> security-reports/basic-pentest-results.md
          else
            echo "‚ö†Ô∏è X-Frame-Options header missing" >> security-reports/basic-pentest-results.md
          fi
          
          if curl -I "$BASE_URL" 2>/dev/null | grep -i "x-content-type-options"; then
            echo "‚úÖ X-Content-Type-Options header present" >> security-reports/basic-pentest-results.md
          else
            echo "‚ö†Ô∏è X-Content-Type-Options header missing" >> security-reports/basic-pentest-results.md
          fi
          
          if curl -I "$BASE_URL" 2>/dev/null | grep -i "strict-transport-security"; then
            echo "‚úÖ Strict-Transport-Security header present" >> security-reports/basic-pentest-results.md
          else
            echo "‚ö†Ô∏è Strict-Transport-Security header missing" >> security-reports/basic-pentest-results.md
          fi

      - name: Upload penetration test results
        uses: actions/upload-artifact@v4
        with:
          name: penetration-test-results
          path: security-reports/
          retention-days: 30

  analyze-security-results:
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, dependency-audit, code-analysis, infrastructure-scan, penetration-test]
    if: always() && (needs.vulnerability-scan.result == 'success' || needs.dependency-audit.result == 'success' || needs.code-analysis.result == 'success' || needs.infrastructure-scan.result == 'success' || needs.penetration-test.result == 'success')
    steps:
      - name: Download all security scan results
        uses: actions/download-artifact@v4
        with:
          pattern: "*-results"
          merge-multiple: true

      - name: Analyze security results
        run: |
          echo "üìä Analyzing security scan results..."
          
          # Create comprehensive security report
          echo "# Security Scan Report" > security-report.md
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> security-report.md
          echo "**Scan Type:** ${{ github.event.inputs.scan_type }}" >> security-report.md
          echo "**Severity Threshold:** ${{ github.event.inputs.severity_threshold }}" >> security-report.md
          echo "**Executed by:** ${{ github.actor }}" >> security-report.md
          echo "**Date:** $(date)" >> security-report.md
          echo "" >> security-report.md
          
          # Count vulnerabilities by severity
          echo "## Executive Summary" >> security-report.md
          
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          MODERATE_COUNT=0
          LOW_COUNT=0
          
          # Analyze npm audit results
          if [ -f "backend-vulnerabilities.json" ]; then
            echo "### Backend Vulnerabilities" >> security-report.md
            if command -v jq >/dev/null 2>&1; then
              CRITICAL_COUNT=$((CRITICAL_COUNT + $(jq '.metadata.vulnerabilities.critical // 0' backend-vulnerabilities.json)))
              HIGH_COUNT=$((HIGH_COUNT + $(jq '.metadata.vulnerabilities.high // 0' backend-vulnerabilities.json)))
              MODERATE_COUNT=$((MODERATE_COUNT + $(jq '.metadata.vulnerabilities.moderate // 0' backend-vulnerabilities.json)))
              LOW_COUNT=$((LOW_COUNT + $(jq '.metadata.vulnerabilities.low // 0' backend-vulnerabilities.json)))
            fi
            echo "Backend audit results available in artifacts" >> security-report.md
          fi
          
          if [ -f "frontend-vulnerabilities.json" ]; then
            echo "### Frontend Vulnerabilities" >> security-report.md
            if command -v jq >/dev/null 2>&1; then
              CRITICAL_COUNT=$((CRITICAL_COUNT + $(jq '.metadata.vulnerabilities.critical // 0' frontend-vulnerabilities.json)))
              HIGH_COUNT=$((HIGH_COUNT + $(jq '.metadata.vulnerabilities.high // 0' frontend-vulnerabilities.json)))
              MODERATE_COUNT=$((MODERATE_COUNT + $(jq '.metadata.vulnerabilities.moderate // 0' frontend-vulnerabilities.json)))
              LOW_COUNT=$((LOW_COUNT + $(jq '.metadata.vulnerabilities.low // 0' frontend-vulnerabilities.json)))
            fi
            echo "Frontend audit results available in artifacts" >> security-report.md
          fi
          
          # Add summary counts
          echo "" >> security-report.md
          echo "### Vulnerability Summary" >> security-report.md
          echo "- **Critical:** $CRITICAL_COUNT" >> security-report.md
          echo "- **High:** $HIGH_COUNT" >> security-report.md
          echo "- **Moderate:** $MODERATE_COUNT" >> security-report.md
          echo "- **Low:** $LOW_COUNT" >> security-report.md
          echo "" >> security-report.md
          
          # Add scan results sections
          if [ -f "semgrep-security-analysis.json" ]; then
            echo "## Code Analysis Results" >> security-report.md
            echo "Static code analysis completed. Results available in artifacts." >> security-report.md
            echo "" >> security-report.md
          fi
          
          if [ -f "infrastructure-trivy-scan.json" ]; then
            echo "## Infrastructure Scan Results" >> security-report.md
            echo "Infrastructure security scan completed. Results available in artifacts." >> security-report.md
            echo "" >> security-report.md
          fi
          
          if [ -f "basic-pentest-results.md" ]; then
            echo "## Penetration Test Results" >> security-report.md
            cat basic-pentest-results.md >> security-report.md
            echo "" >> security-report.md
          fi
          
          # Add recommendations
          echo "## Recommendations" >> security-report.md
          if [ $CRITICAL_COUNT -gt 0 ]; then
            echo "üö® **CRITICAL:** Immediate action required - $CRITICAL_COUNT critical vulnerabilities found" >> security-report.md
          fi
          if [ $HIGH_COUNT -gt 0 ]; then
            echo "‚ö†Ô∏è **HIGH:** Priority remediation needed - $HIGH_COUNT high severity vulnerabilities found" >> security-report.md
          fi
          echo "- Review all vulnerability reports in the artifacts" >> security-report.md
          echo "- Update dependencies to latest secure versions" >> security-report.md
          echo "- Implement security headers if missing" >> security-report.md
          echo "- Schedule regular security scans" >> security-report.md
          echo "- Consider implementing additional security controls" >> security-report.md

      - name: Upload comprehensive security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.run_number }}
          path: security-report.md
          retention-days: 90

  notification:
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, dependency-audit, code-analysis, infrastructure-scan, penetration-test, analyze-security-results]
    if: always()
    steps:
      - name: Notify security scan status
        run: |
          echo "üîí Security Scan Notification"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Scan Type: ${{ github.event.inputs.scan_type }}"
          echo "Severity Threshold: ${{ github.event.inputs.severity_threshold }}"
          echo "Executed by: ${{ github.actor }}"
          echo ""
          
          # Check results
          if [ "${{ needs.analyze-security-results.result }}" == "success" ]; then
            echo "‚úÖ Security scanning completed successfully"
            echo "üìã Comprehensive security report generated and available in artifacts"
            echo "üîç Review all scan results for security issues"
          else
            echo "‚ùå Security scanning failed or incomplete"
            echo "üìã Check the workflow logs for details"
          fi
          
          echo ""
          echo "üìä Scan Summary:"
          echo "- Vulnerability Scan: ${{ needs.vulnerability-scan.result }}"
          echo "- Dependency Audit: ${{ needs.dependency-audit.result }}"
          echo "- Code Analysis: ${{ needs.code-analysis.result }}"
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}"
          echo "- Penetration Test: ${{ needs.penetration-test.result }}"
          echo "- Analysis: ${{ needs.analyze-security-results.result }}"