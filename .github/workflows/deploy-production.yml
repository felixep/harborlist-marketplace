name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Type "deploy-production" to confirm deployment to production environment'
        required: true
        type: string
      deployment_type:
        description: 'Deployment type'
        required: true
        type: choice
        options:
          - 'standard'
          - 'hotfix'
          - 'rollback'
        default: 'standard'
      migration_required:
        description: 'Database migration required'
        required: false
        type: boolean
        default: false
      maintenance_mode:
        description: 'Enable maintenance mode during deployment'
        required: false
        type: boolean
        default: true

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
      - name: Validate deployment confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_deployment }}" != "deploy-production" ]; then
            echo "‚ùå Deployment confirmation failed. Please type 'deploy-production' to confirm."
            exit 1
          fi
          echo "‚úÖ Deployment confirmed for production environment"

      - name: Validate deployment conditions
        run: |
          echo "üîç Validating deployment conditions..."
          echo "Deployment type: ${{ github.event.inputs.deployment_type }}"
          echo "Migration required: ${{ github.event.inputs.migration_required }}"
          echo "Maintenance mode: ${{ github.event.inputs.maintenance_mode }}"
          echo "Requested by: ${{ github.actor }}"
          echo "Branch: ${{ github.ref_name }}"
          
          # Ensure deployment is from main branch for standard deployments
          if [ "${{ github.event.inputs.deployment_type }}" == "standard" ] && [ "${{ github.ref_name }}" != "main" ]; then
            echo "‚ùå Standard production deployments must be from main branch"
            exit 1
          fi

  security-approval:
    runs-on: ubuntu-latest
    needs: validate-input
    environment:
      name: production-security-approval
    steps:
      - name: Security team approval required
        run: |
          echo "üîí Security team approval required for production deployment"
          echo "Deployment type: ${{ github.event.inputs.deployment_type }}"
          echo "Deployment requested by: ${{ github.actor }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  management-approval:
    runs-on: ubuntu-latest
    needs: security-approval
    environment:
      name: production-management-approval
    steps:
      - name: Management approval required
        run: |
          echo "üëî Management approval required for production deployment"
          echo "Deployment type: ${{ github.event.inputs.deployment_type }}"
          echo "Migration required: ${{ github.event.inputs.migration_required }}"
          echo "Maintenance mode: ${{ github.event.inputs.maintenance_mode }}"

  pre-deployment-validation:
    runs-on: ubuntu-latest
    needs: management-approval
    outputs:
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci
          cd ../infrastructure && npm ci

      - name: Run comprehensive test suite
        run: |
          echo "üß™ Running comprehensive test suite..."
          
          echo "Backend tests..."
          cd backend && npm test
          
          echo "Frontend tests..."
          cd ../frontend && npm test -- --run
          
          echo "Infrastructure tests..."
          cd ../infrastructure && npm test
          
          echo "Integration tests..."
          cd ../backend && npm run test:integration || echo "‚ö†Ô∏è Integration tests not configured"
          
          echo "End-to-end tests..."
          cd ../frontend && npm run test:e2e || echo "‚ö†Ô∏è E2E tests not configured"

      - name: Security and compliance validation
        run: |
          echo "üîí Running security and compliance validation..."
          
          # Security audit
          cd backend && npm audit --audit-level=low
          cd ../frontend && npm audit --audit-level=low
          cd ../infrastructure && npm audit --audit-level=low
          
          # Security scan
          ./scripts/operations/security-scan.sh --environment=production --strict || echo "‚ö†Ô∏è Security scan script not found"
          
          # Compliance check
          echo "Running compliance validation..."

      - name: Performance validation
        run: |
          echo "üìä Running performance validation..."
          ./scripts/operations/performance-test.sh --production-baseline || echo "‚ö†Ô∏è Performance test script not found"

      - name: Database migration validation
        if: ${{ github.event.inputs.migration_required == 'true' }}
        run: |
          echo "üóÑÔ∏è Validating database migration..."
          # Add comprehensive migration validation
          echo "Migration validation completed"

      - name: Staging environment validation
        run: |
          echo "üîç Validating staging environment..."
          # Ensure staging is healthy and matches production requirements
          curl -f https://staging.boatlistings.com/health || echo "‚ö†Ô∏è Staging health check failed"
          echo "Staging validation completed"

      - name: Set deployment flag
        id: validation
        run: echo "should-deploy=true" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build backend
        run: |
          echo "üèóÔ∏è Building backend for production..."
          cd backend
          npm ci
          npm run build

      - name: Build frontend
        run: |
          echo "üèóÔ∏è Building frontend for production..."
          cd frontend
          npm ci
          npm run build:production

      - name: Prepare infrastructure
        run: |
          echo "üèóÔ∏è Preparing infrastructure for production..."
          cd infrastructure
          npm ci
          npm run build

      - name: Optimize and validate builds
        run: |
          echo "‚ö° Optimizing production builds..."
          
          # Verify build artifacts
          ls -la backend/dist/
          ls -la frontend/dist/
          ls -la infrastructure/cdk.out/
          
          # Check bundle sizes
          echo "üì¶ Checking bundle sizes..."
          du -sh frontend/dist/* || echo "Frontend build verification"
          
          echo "Build optimization completed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-production
          path: |
            backend/dist/
            frontend/dist/
            infrastructure/cdk.out/
          retention-days: 30

  maintenance-mode:
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build]
    if: needs.pre-deployment-validation.outputs.should-deploy == 'true' && github.event.inputs.maintenance_mode == 'true'
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Enable maintenance mode
        run: |
          echo "üöß Enabling maintenance mode..."
          # Add maintenance mode logic here
          echo "Maintenance mode enabled"

  backup:
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build]
    if: needs.pre-deployment-validation.outputs.should-deploy == 'true'
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create production backup
        run: |
          echo "üíæ Creating production backup..."
          ./scripts/operations/backup-database.sh --environment=production --full-backup || echo "‚ö†Ô∏è Backup script not found"
          echo "Production backup completed"

  deploy:
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build, backup]
    if: needs.pre-deployment-validation.outputs.should-deploy == 'true'
    environment:
      name: production
      url: https://boatlistings.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          chmod +x ./scripts/deployment/deploy-production.sh
          ./scripts/deployment/deploy-production.sh --type=${{ github.event.inputs.deployment_type }}

      - name: Run database migration
        if: ${{ github.event.inputs.migration_required == 'true' }}
        run: |
          echo "üóÑÔ∏è Running production database migration..."
          # Add production database migration logic here
          echo "Database migration completed"

      - name: Verify deployment
        run: |
          echo "‚úÖ Verifying production deployment..."
          # Wait for services to be ready
          sleep 120
          
          # Comprehensive health checks
          curl -f https://boatlistings.com/health || echo "‚ö†Ô∏è Health check failed"
          curl -f https://boatlistings.com/api/health || echo "‚ö†Ô∏è API health check failed"
          
          # Critical functionality tests
          echo "üß™ Running critical functionality tests..."
          # Add critical functionality validation
          
          echo "üìä Production deployment verification completed"

  disable-maintenance-mode:
    runs-on: ubuntu-latest
    needs: [deploy, maintenance-mode]
    if: always() && needs.deploy.result == 'success' && github.event.inputs.maintenance_mode == 'true'
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Disable maintenance mode
        run: |
          echo "‚úÖ Disabling maintenance mode..."
          # Add maintenance mode disable logic here
          echo "Maintenance mode disabled"

  post-deployment-validation:
    runs-on: ubuntu-latest
    needs: [deploy, disable-maintenance-mode]
    if: needs.deploy.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run post-deployment validation
        run: |
          echo "üß™ Running post-deployment validation..."
          
          # Comprehensive functionality tests
          echo "Running comprehensive functionality tests..."
          
          # Performance validation
          echo "üìä Running performance validation..."
          ./scripts/operations/performance-test.sh --environment=production || echo "‚ö†Ô∏è Performance test script not found"
          
          # Security validation
          echo "üîí Running security validation..."
          ./scripts/operations/security-scan.sh --environment=production || echo "‚ö†Ô∏è Security scan script not found"
          
          echo "Post-deployment validation completed"

  rollback-on-failure:
    runs-on: ubuntu-latest
    needs: [deploy, post-deployment-validation]
    if: failure()
    environment:
      name: production-emergency
    steps:
      - name: Emergency rollback approval
        run: |
          echo "üö® Emergency rollback required"
          echo "Deployment failed - manual approval required for rollback"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Execute rollback
        run: |
          echo "üîÑ Executing production rollback..."
          chmod +x ./scripts/deployment/rollback.sh
          ./scripts/deployment/rollback.sh --environment=production --emergency

      - name: Disable maintenance mode after rollback
        if: github.event.inputs.maintenance_mode == 'true'
        run: |
          echo "‚úÖ Disabling maintenance mode after rollback..."
          # Add maintenance mode disable logic here
          echo "Maintenance mode disabled"

  notification:
    runs-on: ubuntu-latest
    needs: [deploy, post-deployment-validation, rollback-on-failure, disable-maintenance-mode]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ] && [ "${{ needs.post-deployment-validation.result }}" == "success" ]; then
            echo "‚úÖ PRODUCTION DEPLOYMENT NOTIFICATION: SUCCESS"
            echo "Environment: Production"
            echo "URL: https://boatlistings.com"
            echo "Deployment type: ${{ github.event.inputs.deployment_type }}"
            echo "Deployed by: ${{ github.actor }}"
            echo "Commit: ${{ github.sha }}"
            echo "Migration: ${{ github.event.inputs.migration_required }}"
            echo "Maintenance mode: ${{ github.event.inputs.maintenance_mode }}"
          elif [ "${{ needs.rollback-on-failure.result }}" == "success" ]; then
            echo "üîÑ PRODUCTION DEPLOYMENT NOTIFICATION: ROLLED BACK"
            echo "Environment: Production"
            echo "Deployed by: ${{ github.actor }}"
            echo "Commit: ${{ github.sha }}"
            echo "Emergency rollback completed"
          else
            echo "‚ùå PRODUCTION DEPLOYMENT NOTIFICATION: FAILED"
            echo "Environment: Production"
            echo "Deployed by: ${{ github.actor }}"
            echo "Commit: ${{ github.sha }}"
            echo "üö® IMMEDIATE ATTENTION REQUIRED"
          fi

      - name: Cleanup artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: deployment-logs-production-${{ github.run_number }}
          pattern: build-artifacts-production
          delete-merged: true